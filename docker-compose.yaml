## Container based media tools configuration
##
## Configuration items for this file are taken from the .env file
##
## Have docker-compose.yml and .env in the same directory to launch the stack

version: "3.3"

######################
# SERVICES TO LAUNCH #
######################

services:

  # ----------------------------------------
  # TRAEFIK
  # Reverse Proxy + SSL Support
  # ----------------------------------------
  traefik:
    image: "traefik:v2.10"
    container_name: "traefik"
    environment:
      - TRAEFIK_PROVIDERS_DOCKER_ENDPOINT=socket-proxy
      - CF_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
    networks:
      - traefik_proxy
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true" # ❗️ disable for production
      ## -- providers
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      ## -- entry points
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      ## -- tls certificates 
      - "--certificatesresolvers.myresolver.acme.dnschallenge=true"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.myresolver.acme.email=${EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=letsencrypt/acme.json"
    labels:
      - "traefik.enable=true"
      # - "providers.docker.network=traefik_proxy"
      ## -- Middelware
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_PASSWORD_HASH}"
      ## -- Public Access (Domain) 
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      ## -- Local Access (IP/Hostname)
      # - "traefik.http.routers.api-local.rule=Host(`localhost`)"
      # - "traefik.http.routers.api-local.service=api@internal"
      # - "traefik.http.routers.traefik.middlewares=auth"
    restart: always


  # ----------------------------------------
  # GLUETUN
  # Vpn client
  # ----------------------------------------
  gluetun:
    image: qmcgaw/gluetun
    container_name: gluetun
    cap_add:
      - NET_ADMIN
    environment:
      - TZ=${TZ}
      - VPN_SERVICE_PROVIDER=${VPN_PROVIDER}
      - OPENVPN_USER=${VPN_USER}
      - OPENVPN_PASSWORD=${VPN_PASSWORD}
      - SERVER_REGIONS=${VPN_REGIONS}
      - DOT=on
      - DOT_PROVIDERS=cloudflare
    networks:
      - traefik_proxy
    ports:
      - 3011:3011 # whoamivpn
      - 8888:8888 # qbittorrent
      - 6789:6789 # nzbget
      - 9696:9696 # prowlarr
      - 8989:8989 # sonarr
      - 7878:7878 # radarr
    volumes:
      - "./gluetun:/gluetun"
    devices:
      - /dev/net/tun:/dev/net/tun
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"
      # -- qbittorrent
      - "traefik.http.routers.qbittorrent.service=qbittorrent"
      - "traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.${DOMAIN}`)"
      - "traefik.http.routers.qbittorrent.entrypoints=websecure"
      - "traefik.http.routers.qbittorrent.tls.certresolver=myresolver"
      - "traefik.http.services.qbittorrent.loadbalancer.server.port=8888"
      # -- nzbget
      - "traefik.http.routers.nzbget.service=nzbget"
      - "traefik.http.routers.nzbget.rule=Host(`nzbget.${DOMAIN}`)"
      - "traefik.http.routers.nzbget.entrypoints=websecure"
      - "traefik.http.routers.nzbget.tls.certresolver=myresolver"
      - "traefik.http.services.nzbget.loadbalancer.server.port=6789"
      # -- prowlarr
      - "traefik.http.routers.prowlarr.service=prowlarr"
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.${DOMAIN}`)"
      - "traefik.http.routers.prowlarr.entrypoints=websecure"
      - "traefik.http.routers.prowlarr.tls.certresolver=myresolver"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
      # -- sonarr
      - "traefik.http.routers.sonarr.service=sonarr"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`)"
      - "traefik.http.routers.sonarr.entrypoints=websecure"
      - "traefik.http.routers.sonarr.tls.certresolver=myresolver"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
      # -- radarr
      - "traefik.http.routers.radarr.service=radarr"
      - "traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`)"
      - "traefik.http.routers.radarr.entrypoints=websecure"
      - "traefik.http.routers.radarr.tls.certresolver=myresolver"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
    restart: unless-stopped


  # ----------------------------------------
  # QBITTORRENT
  # Torrent Client
  # ----------------------------------------
  qbittorrent:
    image: linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PUID}
      - WEBUI_PORT=8888
    network_mode: 'service:gluetun'
    volumes:
      - ./qbittorrent:/config
      - "${MEDIA_PATH}/torrents/Completed:/downloads"
    restart: unless-stopped


  # ----------------------------------------
  # NZBGET
  # Usenet client
  # ----------------------------------------
  nzbget:
    image: lscr.io/linuxserver/nzbget:latest
    container_name: nzbget
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PUID}
      - NZBGET_USER=${NZBGET_USER}
      - NZBGET_PASS=${NZBGET_PASS}
    network_mode: 'service:gluetun'
    volumes:
      - "./nzbget:/config"
      - "${MEDIA_PATH}/torrents/Completed:/downloads/completed"
    restart: unless-stopped


  # ----------------------------------------
  # PROWLARR
  # Index management
  # ----------------------------------------
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    network_mode: 'service:gluetun'
    volumes:
      - "./prowlarr:/config"      
    restart: unless-stopped


  # ----------------------------------------
  # SONARR
  # TV Series Management
  # ----------------------------------------
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    network_mode: 'service:gluetun'
    volumes:
      - "./sonarr:/config"
      - "${MEDIA_PATH}/media/series:/tv"
      - "${MEDIA_PATH}/torrents/Completed:/downloads"
    restart: unless-stopped


  # ----------------------------------------
  # RADARR
  # Movies Management
  # ----------------------------------------
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    network_mode: 'service:gluetun'
    volumes:
      - "./radarr:/config"
      - "${MEDIA_PATH}/media/movies:/movies"
      - "${MEDIA_PATH}/torrents/Completed:/downloads"
    restart: unless-stopped


  # ----------------------------------------
  # PLEX
  # Robust Media Server
  # ----------------------------------------
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "32400:32400/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      - "1900:1900/udp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      - "5354:5353/udp"
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - VERSION=docker
      - PLEX_CLAIM=${PMSTOKEN}
    volumes:
      - "./plex:/config"
      - "./plex/transcode:/transcode"
      - "${MEDIA_PATH}/media/movies:/movies"
      - "${MEDIA_PATH}/media/series:/tv"
    labels:
      - "traefik.enable=true"
      - "providers.docker.network=traefik_proxy"
      ## -- Public Access (Domain)
      - "traefik.http.routers.plex.rule=Host(`plex.${DOMAIN}`)"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
      - "traefik.http.routers.plex.entrypoints=websecure"
      - "traefik.http.routers.plex.tls=true"
      - "traefik.http.routers.plex.tls.certresolver=myresolver"
      ## -- Local Access (IP/Hostname)
      # - "traefik.http.routers.plex-local.rule=Host(`localhost`)"


  # # ----------------------------------------
  # # HOMARR
  # # Dashboard
  # # ----------------------------------------
  # homarr:
  #   image: ghcr.io/homarr-labs/homarr:latest
  #   container_name: homarr
  #   restart: unless-stopped
  #   networks:
  #     - traefik_proxy
  #   ports:
  #     - '7575:7575'
  #   environment:
  #     - SECRET_ENCRYPTION_KEY=${HOMARR_ENCRYPTION_SECRET_KEY}
  #     - DOCKER_HOSTNAMES=socket-proxy
  #     - DOCKER_PORTS=2375
  #   volumes:
  #     - "./homarr/appdata:/appdata"
  #   labels:
  #     - "traefik.enable=true"
  #     - "providers.docker.network=traefik_proxy"
  #     ## -- Public Access (Domain)
  #     - "traefik.http.routers.homarr.rule=Host(`tardis.${DOMAIN}`)"
  #     - "traefik.http.routers.homarr.entrypoints=websecure"
  #     - "traefik.http.routers.homarr.tls=true"
  #     - "traefik.http.routers.homarr.tls.certresolver=myresolver"


networks:
  traefik_proxy:
    external: true

volumes:
  gluetun:
